// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())

  userId             String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expires      DateTime

  @@map("Sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  image         String?
  accounts      Account[]
  sessions      Session[]

  picture       String?
  hasOptInEmail Boolean? @default(false)

  dataStores    DataStore[]
  dataSrcs      DataSrc[]
  subscriptions Subscription[]  @relation("user")
  usage         Usage?
  conversations Conversation[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Users")
}

model Usage {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  nbAgentQueries        Int @default(0)
  nbDataStoreQueries    Int @default(0)
  nbUploadedBytes       Int @default(0)
  nbDataProcessingBytes Int @default(0)
  nbModelTokens         Int @default(0)
}

model DataStore {
  id String @id @default(cuid())

  name        String
  description String?
  type        DataStoreType
  dataSrcs    DataSrc[]
  visibility  DataStoreVisibility @default(private)

  config Json?

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("DataStores")
}

// Naming the model DataSrc conflicts with prisma
// https://github.com/prisma/prisma/issues/12332
model DataSrc {
  id     String           @id @default(cuid())
  type   DataSrcType
  name   String
  status DataSrcStatus @default(unsynched)

  summary String?
  thumbnail String?

  config Json?

  dataStoreId String?
  dataStore   DataStore? @relation(fields: [dataStoreId], references: [id], onDelete: Cascade)

  ownerId     String?
  owner       User?   @relation(fields: [ownerId], references: [id])

  nbChunks  Int? @default(0)
  textSize  Int? @default(0)

  hash      String?

  nbSynch   Int?      @default(0)
  lastSynch DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("DataSrcs")
}

model Conversation {
  id        String  @id @default(cuid())
  visitorId String?
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])

  agentId  String?
  messages Message[]

  channel ConversationChannel @default(dashboard)

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([visitorId], type: Hash)
  @@map("Conversations")
}


model Message {
  id             String        @id @default(cuid())
  text           String
  from           MessageFrom
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sources        Json?

  read Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("Messages")
}

model Product {
  id          String   @id @default(cuid())
  active      Boolean  @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prices      Price[]

  @@map("Products")
}

model Price {
  id                String         @id @default(cuid())
  productId         String
  active            Boolean        @default(false)
  currency          String
  interval          PriceInterval?
  unitAmount        Int?
  interval_count    Int?
  trial_period_days Int?
  type              PriceType?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  product           Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions     Subscription[]

  @@map("Prices")
}

model Subscription {
  id                   String             @id @default(cuid())
  plan                 SubscriptionPlan?  @default(level_1)
  priceId              String
  customerId           String
  status               SubscriptionStatus
  start_date           DateTime?
  ended_at             DateTime?
  trial_end            DateTime?
  trial_start          DateTime?
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  metadata             Json?
  coupon               String?

  price Price @relation(fields: [priceId], references: [id])

  user   User?   @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Subscriptions")
}


enum DataStoreVisibility {
  public
  private
}

enum DataSrcStatus {
  unsynched
  pending
  running
  synched
  error
  usage_limit_reached
}

enum DataSrcType {
  web_page
  web_site
  text
  file
  google_drive_file
  google_drive_folder
  notion
}

enum DataStoreType {
  qdrant
}

enum SubscriptionPlan {
  level_0
  level_1
  level_2
  level_3
}

enum PriceType {
  recurring
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PriceInterval {
  day
  month
  week
  year
}

enum PromptType {
  raw
  customer_support
}

enum MessageFrom {
  agent
  human
}

enum ConversationChannel {
  dashboard
  website
  slack
  crisp
}

enum ModelName {
  gpt_3_5_turbo
  gpt_3_5_turbo_16k
  gpt_4
  gpt_4_32k
}

